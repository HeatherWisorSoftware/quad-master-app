@page "/QuadsPage/{TournamentId:int}"
@using Microsoft.EntityFrameworkCore
@using QuadMasterApp.Services
@inject NavigationManager NavigationManager
@inject TournamentContext DbContext
@inject IThemeProvider ThemeProvider

<h1>Tournament Quads: @ViewModel?.TournamentName</h1>

<div class="d-flex flex-wrap justify-content-between mb-4">
    <!-- MudBlazor Pagination Controls -->
    <div class="pagination-controls d-flex align-items-center">
        <MudPagination Variant="Variant.Outlined"
                       Count="@TotalPages"
                       SelectedChanged="OnPageChanged"
                       Selected="@CurrentPage"
                       Color="Color.Primary"
                       Size="Size.Medium"
                       Class="my-2"/>

        <MudText Typo="Typo.body2" Class="ml-4">
            Group @CurrentPage of @TotalPages | Total Quads: @(ViewModel?.AllQuads?.Count ?? 0)
        </MudText>
    </div>
    <!-- Add this somewhere on your page to help debug -->
    @*   <MudExpansionPanel Class="mt-4" IsInitiallyExpanded="false">
        <TitleContent>
            <div class="d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.BugReport" Class="mr-2" />
                <MudText>Debug Info</MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudText Typo="Typo.body2">Tournament Status: @(ViewModel.Tournament?.IsLocked == true ? "ACTIVE" : "OPEN")</MudText>
            <MudText Typo="Typo.body2">Match Count: @DbContext.QuadMatches.Count(m => m.Quad.TournamentId == TournamentId)</MudText>
            <MudText Typo="Typo.body2">Current Results Count: @CurrentMatchResults.Count</MudText>
            <MudText Typo="Typo.body2">Player Scores Count: @PlayerScores.Count</MudText>
        </ChildContent>
    </MudExpansionPanel> *@
    <div>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="GenerateQuads"
                   Disabled="@(!ViewModel.AllowQuadGeneration)">
            Generate Quads
        </MudButton>
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Secondary"
                   Href="@($"/tournament/{TournamentId}")">
            Back to Tournament
        </MudButton>
    </div>
</div>
@* 
<MudPaper Class="pa-4 my-4" Elevation="2">
    <div class="d-flex justify-space-between align-center">
        <div>
            <MudText Typo="Typo.h6">
                 Tournament Status:
                 <strong>@(ViewModel.Tournament?.IsLocked == true ? "ACTIVE (Locked)" : "OPEN (Editable)")</strong>
             </MudText>
             <MudText Typo="Typo.body2">
                 @if (ViewModel.Tournament?.IsLocked == true)
                 {
                     <span>Tournament is locked. Match results are being recorded.</span>
                 }
                 else 
                 { 
                     <span>Tournament is open for editing. Players and quads can be modified.</span>
                 } 
             </MudText> 
         </div> 

         <MudToggleIconButton Toggled="@(ViewModel.Tournament?.IsLocked == true)"
         ToggledChanged="ToggleTournamentStatus"
         Icon="@Icons.Material.Filled.Edit" Color="@Color.Success" Title="Open For Editing"
         ToggledIcon="@Icons.Material.Filled.Lock" ToggledColor="@Color.Error" ToggledTitle="Locked/Active" />
     </div>
 </MudPaper> *@

<div class="quad-container">
    <MudDropContainer T="TournamentPlayer"
                      Items="@ViewModel.UnassignedPlayers"
                      ItemDropped="PlayerAssigned"
                      Disabled="@(ViewModel.Tournament?.IsLocked == true)"
                      Class="d-flex flex-column flex-grow-1">

        <ChildContent>
            <div class="d-flex">
                <div class="quads-section">
                    <div class="d-flex flex-wrap">
                        @for (var i = 0; i < DisplayedQuads.Count; i++)
                        {
                            var quad = DisplayedQuads[i];
                            var quadId = quad.Id.ToString();
                            var quadColorClass = GetThemeColorClass(quad.Id);
                            <MudPaper Class="@($"quad-paper ma-2 {quadColorClass}")" Elevation="3">
                                <div class="quad-table">
                                    <div class="quad-side">
                                        <div class="quad-identifier">
                                            <span>QUAD @quad.Id</span>
                                        </div>
                                    </div>
                                    <div class="quad-main">
                                        <div class="quad-header">
                                            <div class="quad-header-cell player-header">Player</div>
                                            <div class="quad-header-cell">Rd 1</div>
                                            <div class="quad-header-cell">Rd 2</div>
                                            <div class="quad-header-cell">Rd 3</div>
                                            <div class="quad-header-cell">Total</div>
                                        </div>

                                        <!-- For quad players -->
                                        <MudDropZone T="TournamentPlayer"
                                                     Identifier="@quadId"
                                                     ItemsSelector="@(p => p.QuadId?.ToString() == quadId)"
                                                     AllowReorder="true"
                                                     Class="quad-dropzone"/>
                                    </div>
                                </div>
                            </MudPaper>
                        }
                    </div>
                </div>

                <MudPaper Class="unassigned-paper ma-2" Elevation="2">
                    <div class="unassigned-header">
                        <h3 class="text-center">Unassigned Players</h3>
                    </div>
                    <MudDropZone T="TournamentPlayer"
                                 Identifier="unassigned"
                                 ItemsSelector="@(p => p.QuadId == null)"
                                 AllowReorder="true"
                                 Class="unassigned-dropzone"/>
                </MudPaper>
            </div>
        </ChildContent>

        <ItemRenderer>
            @if (context.QuadId.HasValue)
            {
                <div class="quad-player-row">
                    <div class="player-cell">
                        <div class="player-position">@GetPlayerPositionInQuad(context)</div>
                        <div class="player-name">@context.Player.LastName @context.Player.FirstName</div>
                        <div class="player-rating">@context.Player.Ranking</div>
                    </div>

                    @{
                        var position = GetPlayerPositionInQuad(context);
                        var opponents = GetQuadOpponents(context);
                    }

                    @foreach (var round in new[] { 1, 2, 3 })
                    {
                        <div class="round-cell">
                            <div class="opponent">@opponents[round - 1]</div>
                            <div class="score-cell">
                                @if (ViewModel.Tournament.IsLocked)
                                {
                                    <span class="score-value">@GetScore(context, round)</span>
                                }
                                else
                                {
                                    <MudTextField T="string" Class="score-input"

                                                  @bind-Value="@PlayerScores[GetScoreKey(context, round)]"
                                                  @bind-Value:after="@(() => SaveScoreFromBinding(context, round))"
                                                  Immediate="true"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Dense"
                                                  Disabled="false"/>
                                }
                            </div>
                            <div class="table-number">TBL @GetTableNumber(context, round)</div>
                        </div>
                    }

                    <div class="total-cell">
                        <span class="total-score">@GetTotalScore(context)</span>
                        @if (ViewModel.AllowPlayerRemoval)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Close"
                                           Size="Size.Small"
                                           Class="remove-btn"
                                           OnClick="@(() => RemovePlayerFromQuad(context))"/>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="player-card unassigned">
                    <div class="player-info">
                        <div class="player-name">@context.Player.LastName @context.Player.FirstName</div>
                        <div class="player-rating">@context.Player.Ranking</div>
                    </div>
                </div>
            }
        </ItemRenderer>
    </MudDropContainer>
</div>

<style>
    .quad-container {
    width: 100%;
    }

    /* Layout for side-by-side display */
    .quads-section {
    flex: 4;
    }

    .unassigned-paper {
    flex: 1;
    min-width: 220px;
    max-width: 300px;
    height: fit-content;
    margin-top: 0 !important;
    }

    .quad-paper {
    width: 48%;
    margin: 0 1% 16px 1%;
    border: 1px solid #ddd;
    display: flex;
    flex-direction: column;
    }

    /* Quad table layout */
    .quad-table {
    display: flex;
    width: 100%;
    height: 100%;
    border-collapse: collapse;
    }

    .quad-side {
    width: 70px;
    /* Background color inherits from parent .quad-paper which has the color class */
    border-right: 1px solid var(--mud-palette-divider);
    display: flex;
    align-items: center;
    justify-content: center;
    writing-mode: vertical-rl;
    transform: rotate(180deg);
    }

    .quad-identifier {
    font-size: 24px;
    font-weight: bold;
    text-align: center;
    height: 100%;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--mud-palette-text-primary);
    }

    .quad-main {
    flex: 1;
    }

    /* Quad header */
    .quad-header {
    display: flex;
    border-bottom: 1px solid var(--mud-palette-divider);
    background-color: var(--mud-palette-surface);
    }

    .quad-header-cell {
    flex: 1;
    padding: 8px;
    text-align: center;
    font-weight: bold;
    border-right: 1px solid var(--mud-palette-divider);
    display: flex;
    align-items: center;
    justify-content: center;
    }

    .player-header {
    flex: 2.45;
    }

    /* Quad dropzone */
    .quad-dropzone {
    min-height: 400px;
    background-color: var(--mud-palette-background-grey);
    }

    /* Player row in quad */
    .quad-player-row {
    display: flex;
    border-bottom: 1px solid var(--mud-palette-divider);
    background-color: var(--mud-palette-surface);
    }

    .player-cell {
    flex: 2;
    padding: 8px;
    border-right: 1px solid #ddd;
    display: flex;
    flex-direction: column;
    }

    .player-position {
    font-size: 18px;
    font-weight: bold;
    margin-right: 8px;
    color: #666;
    }

    .player-name {
    font-size: 18px;
    font-weight: bold;
    color: #666;
    }

    .player-rating {
    font-size: 16px;
    color: #333;
    }

    .round-cell {
    flex: 1;
    display: flex;
    flex-direction: column;
    border-right: 1px solid #ddd;
    margin: 0;
    }

    .opponent {
    padding: 4px;
    text-align: center;
    border-bottom: 1px solid #eee;
    color: #666;
    }

    .score-cell {
    padding: 8px;
    text-align: center;
    font-size: 18px;
    font-weight: bold;
    background-color: inherit;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    }

    .table-number {
    padding: 4px;
    text-align: center;
    border-top: 1px solid #eee;
    color: #666;
    }

    .total-cell {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: relative;
    }

    .total-score {
    font-size: 32px;
    font-weight: bold;
    color: #666;
    }

    .remove-btn {
    position: absolute;
    top: 4px;
    right: 4px;
    }

    /* Unassigned players section */
    .unassigned-header {
    background-color: #f0f0f0;
    padding: 8px;
    border-bottom: 1px solid #ddd;
    }

    .unassigned-dropzone {
    min-height: 400px;
    padding: 8px;
    overflow-y: auto;
    }

    .player-card {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
    padding: 6px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 4px;
    width: 100%;
    font-size: 14px;
    }

    .player-number {
    font-size: 20px;
    font-weight: bold;
    margin-right: 16px;
    min-width: 24px;
    text-align: center;
    }

    .player-info {
    flex-grow: 1;
    }

    /* Pagination styles */
    .pagination-controls {
    margin-bottom: 12px;
    display: flex;
    align-items: center;
    }

    .mud-pagination {
    margin-right: 16px;
    }

    /* Theme color classes for quads */
    /* Primary color */
    .quad-paper.mud-paper.quad-color-primary {
    background-color: var(--mud-palette-primary-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-primary .quad-side {
    background-color: var(--mud-palette-primary-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-primary .score-cell {
    background-color: var(--mud-palette-primary-lighten) !important;
    }

    /* Secondary color */
    .quad-paper.mud-paper.quad-color-secondary {
    background-color: var(--mud-palette-secondary-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-secondary .quad-side {
    background-color: var(--mud-palette-secondary-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-secondary .score-cell {
    background-color: var(--mud-palette-secondary-lighten) !important;
    }

    /* Info color */
    .quad-paper.mud-paper.quad-color-info {
    background-color: var(--mud-palette-info-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-info .quad-side {
    background-color: var(--mud-palette-info-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-info .score-cell {
    background-color: var(--mud-palette-info-lighten) !important;
    }

    /* Success color */
    .quad-paper.mud-paper.quad-color-success {
    background-color: var(--mud-palette-success-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-success .quad-side {
    background-color: var(--mud-palette-success-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-success .score-cell {
    background-color: var(--mud-palette-success-lighten) !important;
    }

    /* Warning color */
    .quad-paper.mud-paper.quad-color-warning {
    background-color: var(--mud-palette-warning-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-warning .quad-side {
    background-color: var(--mud-palette-warning-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-warning .score-cell {
    background-color: var(--mud-palette-warning-lighten) !important;
    }

    /* Surface color */
    .quad-paper.mud-paper.quad-color-surface {
    background-color: var(--mud-palette-surface) !important;
    }

    .quad-paper.mud-paper.quad-color-surface .quad-side {
    background-color: var(--mud-palette-surface) !important;
    }

    .quad-paper.mud-paper.quad-color-surface .score-cell {
    background-color: var(--mud-palette-surface) !important;
    }

    /* Original colors */
    .quad-paper.mud-paper.quad-color-yellow {
    background-color: #ffffcc !important;
    }

    .quad-paper.mud-paper.quad-color-yellow .quad-side {
    background-color: #ffffcc !important;
    }

    .quad-paper.mud-paper.quad-color-yellow .score-cell {
    background-color: #ffffcc !important;
    }

    .quad-paper.mud-paper.quad-color-blue {
    background-color: #e6f7ff !important;
    }

    .quad-paper.mud-paper.quad-color-blue .quad-side {
    background-color: #e6f7ff !important;
    }

    .quad-paper.mud-paper.quad-color-blue .score-cell {
    background-color: #e6f7ff !important;
    }
</style>

<style>
    /* Media queries need to be in a separate style block in Blazor */
    @@media (max-width: 1400px) {
    .quad-paper {
    width: 31%;
    }
    }

    @@media (max-width: 1200px) {
    /*     .quads-section {
    flex: 3;
    } */

    .quad-paper {
    width: 48%;
    }
    }

    @@media (max-width:1080px) {
    .quad-paper {
    width: width: 48%; /* Maintain 2 quads per row */
    }
    }

    @@media (max-width: 768px) {
    /* Switch to vertical layout on small screens */
    .d-flex {
    flex-direction: column;
    }
    }

    .quads-section {
    width: 100%;
    }

    .unassigned-paper {
    width: 100%;
    max-width: none;
    margin-top: 16px !important;
    }

    /* Responsive pagination */
    .pagination-controls {
    flex-direction: column;
    align-items: start;
    }

    .pagination-controls .mud-pagination {
    margin-bottom: 12px;
    margin-right: 0;
    }

    .pagination-controls .mud-typography {
    margin-left: 0;
    }

    }
</style>

@code {
    [Parameter] public int TournamentId { get; set; }

    // Get the dark mode state from the layout
    private bool IsDarkMode => ThemeProvider.IsDarkMode;

    private QuadsViewModel ViewModel { get; set; } = new();

    // Properties from the ViewModel
    private string TournamentName => ViewModel?.TournamentName ?? "Tournament Name";
    public List<Quad> DisplayedQuads { get; set; } = new();
    private int CurrentPage { get; set; } = 1;
    private int TotalPages => ViewModel?.TotalPages ?? 1;

    // Dictionary to store match results
    private Dictionary<string, string> CurrentMatchResults { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Reload data if the tournament ID changes
        await LoadData();
    }

    private Dictionary<string, string> PlayerScores { get; } = new();

    private void InitPlayerScores()
    {
        PlayerScores.Clear();

        foreach (var quad in DisplayedQuads)
        {
            foreach (var player in quad.Players)
            {
                for (var round = 1; round <= 3; round++)
                {
                    var key = GetScoreKey(player, round);
                    var score = GetScore(player, round);
                    PlayerScores[key] = score;
                }
            }
        }
    }

    private string GetScoreKey(TournamentPlayer player, int round)
    {
        return $"{player.QuadId}-{player.Id}-{round}";
    }

    private async Task SaveScoreFromBinding(TournamentPlayer player, int round)
    {
        var key = GetScoreKey(player, round);
        if (PlayerScores.TryGetValue(key, out var score))
        {
            await SaveScore(player, round, score);
        }
    }

    private async Task LoadData()
    {
        var tournament = await DbContext.Tournaments
            .Include(t => t.Quads)
            .FirstOrDefaultAsync(t => t.Id == TournamentId);

        if (tournament == null)
        {
            NavigationManager.NavigateTo("/tournaments");
            return;
        }

        // Get all quads for this tournament
        var allQuads = await DbContext.Quads
            .Where(q => q.TournamentId == TournamentId)
            .OrderBy(q => q.QuadGroupNumber)
            .ToListAsync();

        // Include players in the quads
        foreach (var quad in allQuads)
        {
            quad.Players = await DbContext.TournamentPlayers
                .Include(tp => tp.Player)
                .Where(tp => tp.QuadId == quad.Id)
                // .OrderByDescending(tp => tp.Player.Ranking) // Order by ranking
                .ToListAsync();
        }

        // Get unassigned players
        var unassignedPlayers = await DbContext.TournamentPlayers
            .Include(tp => tp.Player)
            .Where(tp => tp.TournamentId == TournamentId && !tp.QuadId.HasValue)
            .OrderByDescending(tp => tp.Player.Ranking) // Order by ranking
            .ToListAsync();

        // Set displayed quads for current page
        var pageSize = 4; // 4 quads per page
        var skip = (CurrentPage - 1) * pageSize;
        DisplayedQuads = allQuads
            .OrderBy(q => q.QuadGroupNumber)
            .Skip(skip)
            .Take(pageSize)
            .ToList();

        // Update ViewModel
        ViewModel = new QuadsViewModel
        {
            Tournament = tournament,
            TournamentId = TournamentId,
            TournamentName = tournament.Name,
            Quads = allQuads,
            AllQuads = allQuads,
            UnassignedPlayers = unassignedPlayers.Concat(DisplayedQuads.SelectMany(q => q.Players)).ToList(),
            CurrentPage = CurrentPage,
            TotalPages = (int)Math.Ceiling(allQuads.Count / 4.0), // 4 quads per page
            AllowQuadGeneration = !tournament.IsLocked,
            AllowPlayerRemoval = !tournament.IsLocked,
            AllowPlayerAssignment = !tournament.IsLocked,
            AreAllQuadsFull = allQuads.Count > 0 && allQuads.All(q => q.Players.Count == 4)
        };

        InitPlayerScores();
        await LoadMatchResults();
    }

    private async Task LoadMatchResults()
    {
        // Clear existing match results
        CurrentMatchResults.Clear();

        // For each displayed quad
        foreach (var quad in DisplayedQuads)
        {
            // Load matches from database
            var matches = await DbContext.QuadMatches
                .Where(m => m.QuadId == quad.Id)
                .ToListAsync();

            foreach (var player in quad.Players)
            {
                // Find matches where this player is involved
                for (var round = 1; round <= 3; round++)
                {
                    var match = matches.FirstOrDefault(m =>
                        m.RoundNumber == round &&
                        (m.PlayerOneId == player.Id || m.PlayerTwoId == player.Id));

                    if (match != null)
                    {
                        // Store the score
                        var score = "";

                        if (match.PlayerOneId == player.Id)
                        {
                            score = match.PlayerOneScore?.ToString() ?? "";
                        }
                        else
                        {
                            score = match.PlayerTwoScore?.ToString() ?? "";
                        }

                        CurrentMatchResults[$"{quad.Id}-{player.Id}-{round}"] = score;
                    }
                    else
                    {
                        // No match found, use empty score
                        CurrentMatchResults[$"{quad.Id}-{player.Id}-{round}"] = "";
                    }
                }
            }
        }
    }

    private string GetPlayerPositionInQuad(TournamentPlayer player)
    {
        if (!player.QuadId.HasValue)
            return "";

        // Use the position from the database if available
        if (player.QuadPosition.HasValue)
            return player.QuadPosition.Value.ToString();

        var quad = DisplayedQuads.FirstOrDefault(q => q.Id == player.QuadId.Value);
        if (quad == null)
            return "";

        // Get the position based on the index in the sorted list
        var playerIndex = quad.Players.FindIndex(p => p.Id == player.Id);
        return (playerIndex + 1).ToString();
    }

    private string[] GetQuadOpponents(TournamentPlayer player)
    {
        if (!player.QuadId.HasValue)
            return new[] { "", "", "" };

        // Use database values if available
        var opponents = new string[3];

        if (!string.IsNullOrEmpty(player.Round1Opponent))
            opponents[0] = player.Round1Opponent;
        else
            opponents[0] = GetDefaultOpponent(player, 1);

        if (!string.IsNullOrEmpty(player.Round2Opponent))
            opponents[1] = player.Round2Opponent;
        else
            opponents[1] = GetDefaultOpponent(player, 2);

        if (!string.IsNullOrEmpty(player.Round3Opponent))
            opponents[2] = player.Round3Opponent;
        else
            opponents[2] = GetDefaultOpponent(player, 3);

        return opponents;
    }

    private string GetDefaultOpponent(TournamentPlayer player, int round)
    {
        var position = int.Parse(GetPlayerPositionInQuad(player));

        // Based on the standard pairing pattern in a quad
        switch (position)
        {
            case 1: // W v 4, B v 3, W v 2
                return round == 1 ? "W v 4" : round == 2 ? "B v 3" : "W v 2";
            case 2: // W v 3, B v 4, B v 1
                return round == 1 ? "W v 3" : round == 2 ? "B v 4" : "B v 1";
            case 3: // B v 2, W v 1, W v 4
                return round == 1 ? "B v 2" : round == 2 ? "W v 1" : "W v 4";
            case 4: // B v 1, W v 2, B v 3
                return round == 1 ? "B v 1" : round == 2 ? "W v 2" : "B v 3";
            default:
                return "";
        }
    }

    private string GetScore(TournamentPlayer player, int round)
    {
        if (!player.QuadId.HasValue)
            return "0";

        var key = $"{player.QuadId}-{player.Id}-{round}";

        if (CurrentMatchResults.TryGetValue(key, out var result))
            return result;

        return "0";
    }

    private string GetTotalScore(TournamentPlayer player)
    {
        if (!player.QuadId.HasValue)
            return "";

        double total = 0;

        for (var i = 1; i <= 3; i++)
        {
            // Try to get from our local cache first
            string score;
            var key = GetScoreKey(player, i);

            if (PlayerScores.TryGetValue(key, out score) ||
                CurrentMatchResults.TryGetValue(key, out score))
            {
                if (double.TryParse(score, out var value))
                {
                    total += value;
                }
            }
        }

        return total.ToString("0.#"); // Format to avoid trailing zeros
    }

    private int GetTableNumber(TournamentPlayer player, int round)
    {
        // Use values from the database if available
        if (round == 1 && player.Round1Table.HasValue)
            return player.Round1Table.Value;
        if (round == 2 && player.Round2Table.HasValue)
            return player.Round2Table.Value;
        if (round == 3 && player.Round3Table.HasValue)
            return player.Round3Table.Value;

        // Fall back to calculated values
        var position = int.Parse(GetPlayerPositionInQuad(player));

        // Based on your image
        switch (position)
        {
            case 1:
                return round == 1 ? 1 : round == 2 ? 1 : 1;
            case 2:
                return round == 1 ? 2 : round == 2 ? 2 : 1;
            case 3:
                return round == 1 ? 2 : round == 2 ? 1 : 2;
            case 4:
                return round == 1 ? 1 : round == 2 ? 2 : 2;
            default:
                return 1;
        }
    }

    private async Task PlayerAssigned(MudItemDropInfo<TournamentPlayer> dropInfo)
    {
        if (ViewModel.Tournament.IsLocked)
        {
            Snackbar.Add("Cannot modify player assignments while tournament is active.", Severity.Warning);
            return;
        }

        // Get the player and update their QuadId
        var player = dropInfo.Item;
        var oldQuadId = player.QuadId;

        // If dropped in unassigned zone
        if (dropInfo.DropzoneIdentifier == "unassigned")
        {
            player.QuadId = null;
        }
        else if (int.TryParse(dropInfo.DropzoneIdentifier, out var quadId))
        {
            // If dropped in a quad
            var quad = DisplayedQuads.FirstOrDefault(q => q.Id == quadId);
            if (quad != null && (quad.Players.Count < 4 || quad.Players.Contains(player)))
            {
                player.QuadId = quadId;

                // Add to quad players collection if not already there
                if (!quad.Players.Contains(player))
                {
                    quad.Players.Add(player);
                }
            }
        }

        // Update the player in the database
        DbContext.TournamentPlayers.Update(player);
        await DbContext.SaveChangesAsync();

        // Renumber players after assignment changes
        if (oldQuadId.HasValue)
        {
            await RenumberPlayersInQuad(oldQuadId.Value);
        }

        if (player.QuadId.HasValue)
        {
            await RenumberPlayersInQuad(player.QuadId.Value);
        }

        // Reload data
        await LoadData();
    }

    private async Task RemovePlayerFromQuad(TournamentPlayer player)
    {
        if (ViewModel.Tournament.IsLocked)
        {
            Snackbar.Add("Cannot remove players while tournament is active.", Severity.Warning);
            return;
        }

        if (player.QuadId.HasValue)
        {
            var quadId = player.QuadId.Value;

            // Remove from quad
            player.QuadId = null;
            player.QuadPosition = null;

            // Clear match data
            player.Round1Score = null;
            player.Round2Score = null;
            player.Round3Score = null;
            player.Round1Opponent = null;
            player.Round2Opponent = null;
            player.Round3Opponent = null;
            player.Round1Table = null;
            player.Round2Table = null;
            player.Round3Table = null;

            // Update in database
            DbContext.TournamentPlayers.Update(player);
            await DbContext.SaveChangesAsync();

            // Renumber remaining players
            await RenumberPlayersInQuad(quadId);

            // Reload data
            await LoadData();
        }
    }

    private bool MatchQuadSelector(TournamentPlayer player, string identifier)
    {
        return (player.QuadId?.ToString() ?? "unassigned") == identifier;
    }

    private async Task SaveScore(TournamentPlayer player, int round, string score)
    {
        if (!player.QuadId.HasValue)
            return;

        // Store the score immediately in the UI dictionary
        var key = $"{player.QuadId}-{player.Id}-{round}";
        CurrentMatchResults[key] = score;

        // Trigger UI update - this is important
        StateHasChanged();

        try
        {
            // Find the match in the database
            var match = await DbContext.QuadMatches
                .FirstOrDefaultAsync(m =>
                    m.RoundNumber == round &&
                    (m.PlayerOneId == player.Id || m.PlayerTwoId == player.Id));

            if (match == null)
            {
                // Snackbar.Add("Match record not found.", Severity.Error);
                return;
            }

            // Update the score
            if (match.PlayerOneId == player.Id)
            {
                if (decimal.TryParse(score, out var scoreValue))
                    match.PlayerOneScore = scoreValue;
                else
                    match.PlayerOneScore = null;
            }
            else
            {
                if (decimal.TryParse(score, out var scoreValue))
                    match.PlayerTwoScore = scoreValue;
                else
                    match.PlayerTwoScore = null;
            }

            // Check if both scores are entered to mark as complete
            if (match.PlayerOneScore.HasValue && match.PlayerTwoScore.HasValue)
            {
                match.IsComplete = true;
                match.CompletedAt = DateTime.UtcNow;
            }
            else
            {
                match.IsComplete = false;
                match.CompletedAt = null;
            }

            // Save to database
            DbContext.QuadMatches.Update(match);
            await DbContext.SaveChangesAsync();

            // Optional: Add success indicator
            Console.WriteLine($"Score saved: Player {player.Id}, Round {round}, Score {score}");
        }
        catch (Exception ex)
        {
            // Log error and show user-friendly message
            Console.WriteLine($"Error saving score: {ex.Message}");
            Snackbar.Add("An error occurred while saving the score.", Severity.Error);
        }
    }


    private async Task RenumberPlayersInQuad(int quadId)
    {
        var quad = await DbContext.Quads
            .Include(q => q.Players)
            .ThenInclude(p => p.Player)
            .FirstOrDefaultAsync(q => q.Id == quadId);

        if (quad == null)
            return;

        // Get players in this quad ordered by ranking
        var sortedPlayers = quad.Players
            .OrderByDescending(p => p.Player.Ranking)
            .ToList();

        // Assign positions
        for (var i = 0; i < sortedPlayers.Count; i++)
        {
            var player = sortedPlayers[i];
            player.QuadPosition = i + 1;

            // Update opponent info based on standard quad pairings
            UpdatePlayerMatchInfo(player);

            DbContext.TournamentPlayers.Update(player);
        }

        await DbContext.SaveChangesAsync();
    }

    private void UpdatePlayerMatchInfo(TournamentPlayer player)
    {
        // Only update if not already set
        if (player.QuadPosition.HasValue)
        {
            var position = player.QuadPosition.Value;

            // Set opponents based on standard quad pairings if not already set
            if (string.IsNullOrEmpty(player.Round1Opponent))
            {
                switch (position)
                {
                    case 1:
                        player.Round1Opponent = "W v 4";
                        player.Round2Opponent = "B v 3";
                        player.Round3Opponent = "W v 2";
                        break;
                    case 2:
                        player.Round1Opponent = "W v 3";
                        player.Round2Opponent = "B v 4";
                        player.Round3Opponent = "B v 1";
                        break;
                    case 3:
                        player.Round1Opponent = "B v 2";
                        player.Round2Opponent = "W v 1";
                        player.Round3Opponent = "W v 4";
                        break;
                    case 4:
                        player.Round1Opponent = "B v 1";
                        player.Round2Opponent = "W v 2";
                        player.Round3Opponent = "B v 3";
                        break;
                }
            }

            // Set table numbers if not already set
            if (!player.Round1Table.HasValue)
            {
                switch (position)
                {
                    case 1:
                        player.Round1Table = 1;
                        player.Round2Table = 1;
                        player.Round3Table = 1;
                        break;
                    case 2:
                        player.Round1Table = 2;
                        player.Round2Table = 2;
                        player.Round3Table = 1;
                        break;
                    case 3:
                        player.Round1Table = 2;
                        player.Round2Table = 1;
                        player.Round3Table = 2;
                        break;
                    case 4:
                        player.Round1Table = 1;
                        player.Round2Table = 2;
                        player.Round3Table = 2;
                        break;
                }
            }
        }
    }

    private async Task OnPageChanged(int page)
    {
        CurrentPage = page;
        await LoadData();
    }

    private async Task GenerateQuads()
    {
        if (ViewModel.Tournament.IsLocked)
        {
            Snackbar.Add("Cannot generate quads while tournament is active.", Severity.Warning);
            return;
        }

        try
        {
            // Get all unassigned players
            var unassignedPlayers = await DbContext.TournamentPlayers
                .Include(tp => tp.Player)
                .Where(tp => tp.TournamentId == TournamentId && !tp.QuadId.HasValue)
                .OrderByDescending(tp => tp.Player.Ranking)
                .ToListAsync();

            if (unassignedPlayers.Count == 0)
            {
                // No players to assign
                return;
            }

            // Find the highest quad group number for this tournament
            var highestGroupNumber = 0;

            // Use a safer approach to get the max group number
            var maxGroupQuery = await DbContext.Quads
                .Where(q => q.TournamentId == TournamentId)
                .Select(q => q.QuadGroupNumber)
                .ToListAsync();

            if (maxGroupQuery.Any())
            {
                highestGroupNumber = maxGroupQuery.Max();
            }

            // Create quads with 4 players each
            var quadCounter = 0;
            var playerCounter = 0;
            Quad currentQuad = null;

            while (playerCounter < unassignedPlayers.Count)
            {
                // Create a new quad for every 4 players
                if (playerCounter % 4 == 0)
                {
                    quadCounter++;
                    currentQuad = new Quad
                    {
                        Title = $"Quad {quadCounter}",
                        TournamentId = TournamentId,
                        QuadGroupNumber = highestGroupNumber + (int)Math.Ceiling(quadCounter / 4.0) // 4 quads per group
                    };

                    DbContext.Quads.Add(currentQuad);
                    await DbContext.SaveChangesAsync(); // Save to get Id
                }

                // Assign player to the quad
                var player = unassignedPlayers[playerCounter];
                player.QuadId = currentQuad.Id;
                player.QuadPosition = playerCounter % 4 + 1;

                // Initialize required string fields that cannot be null
                player.Round1Score = player.Round1Score ?? "";
                player.Round2Score = player.Round2Score ?? "";
                player.Round3Score = player.Round3Score ?? "";
                player.Round1Opponent = player.Round1Opponent ?? "";
                player.Round2Opponent = player.Round2Opponent ?? "";
                player.Round3Opponent = player.Round3Opponent ?? "";

                DbContext.TournamentPlayers.Update(player);
                playerCounter++;
            }

            await DbContext.SaveChangesAsync();

            // Reload data to show the new quads
            await LoadData();
        }
        catch (Exception ex)
        {
            // Log the exception
            Console.WriteLine($"Error generating quads: {ex.Message}");
            // You could also add proper logging or error handling here
        }
    }

    private string GetThemeColorClass(int quadNumber)
    {
        // Use modulo to cycle through different color options
        switch (quadNumber % 4)
        {
            case 0: return "quad-color-primary";
            case 1: return "quad-color-success";
            case 2: return "quad-color-secondary";
            case 3: return "quad-color-info";
            default: return "quad-color-surface";
        }
    }

    private async Task ToggleTournamentStatus(bool isActive)
    {
        // Get confirmation
        var message = isActive
            ? "Lock tournament and start recording match results?"
            : "Open tournament for editing? Any existing match data will be preserved.";

        var confirmed = await DialogService.ShowMessageBox(
            isActive ? "Lock Tournament" : "Open Tournament",
            message,
            "Yes", "Cancel", "");

        if (confirmed ?? false)
        {
            var tournament = await DbContext.Tournaments
                .FirstOrDefaultAsync(t => t.Id == TournamentId);

            if (tournament != null)
            {
                // Update tournament status
                tournament.IsLocked = isActive;

                if (isActive)
                {
                    // When locking (activating), ensure all matches are created
                    await GenerateMatchesIfNeeded();
                }

                // Save to database
                DbContext.Tournaments.Update(tournament);
                await DbContext.SaveChangesAsync();

                // Refresh UI
                await LoadData();

                Snackbar.Add(
                    isActive
                        ? "Tournament locked. Match results can now be recorded."
                        : "Tournament opened for editing.",
                    Severity.Success);
            }
        }
    }

    private async Task GenerateMatchesIfNeeded()
    {
        // Check if matches already exist
        var matchesExist = await DbContext.QuadMatches
            .AnyAsync(m => m.Quad.TournamentId == TournamentId);

        var quadsFull = ViewModel.AreAllQuadsFull;


        // If no matches exist or the quads are not full
        if (!matchesExist || !quadsFull)
        {
            Snackbar.Add("Please assign all players to quads prior to proceeding.", Severity.Info);
        }
    }

    private void CreateMatch(int quadId, TournamentPlayer player1, TournamentPlayer player2,
        int round, int table, string player1Color)
    {
        var match = new QuadMatch
        {
            QuadId = quadId,
            PlayerOneId = player1.Id,
            PlayerTwoId = player2.Id,
            RoundNumber = round,
            TableNumber = table,

            // Store player details for history
            PlayerOneName = $"{player1.Player.LastName} {player1.Player.FirstName}",
            PlayerTwoName = $"{player2.Player.LastName} {player2.Player.FirstName}",
            PlayerOneRanking = player1.Player.Ranking,
            PlayerTwoRanking = player2.Player.Ranking,

            PlayerOneColor = player1Color,
            IsComplete = false
        };

        DbContext.QuadMatches.Add(match);
    }


}