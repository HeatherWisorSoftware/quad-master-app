@page "/QuadsPage/{TournamentId:int}"
@using Microsoft.EntityFrameworkCore
@using QuadMasterApp.Services
@inject NavigationManager NavigationManager
@inject TournamentContext DbContext
@inject IThemeProvider ThemeProvider
@inject AppStateService AppState


<HeadContent>
    <link href="print-styles.css" rel="stylesheet" media="print" />
</HeadContent>

<h1>Tournament Quads: @ViewModel?.TournamentName</h1>

<div class="d-flex flex-wrap justify-content-between mb-4">
    <!-- MudBlazor Pagination Controls -->
    <div class="pagination-controls d-flex align-items-center">
        <MudPagination Variant="Variant.Outlined"
        Count="@TotalPages"
        SelectedChanged="OnPageChanged"
        Selected="@CurrentPage"
        Color="Color.Primary"
        Size="Size.Medium"
        Class="my-2"/>

        <MudText Typo="Typo.body2" Class="ml-4">
            Group @CurrentPage of @TotalPages | Total Quads: @(ViewModel?.AllQuads?.Count ?? 0)
        </MudText>
    </div>

    <div>
        <MudButton Variant="Variant.Filled"
        Color="Color.Primary"
        OnClick="GenerateQuads"
        Disabled="@(!ViewModel.AllowQuadGeneration)">
            Generate Quads
        </MudButton>

        <MudButton Variant="Variant.Outlined"
        Color="Color.Secondary"
        OnClick="PrintPage"
        StartIcon="@Icons.Material.Filled.Print"
        Class="ml-2">
            Print Tournament
        </MudButton>

    </div>
</div>

<div class="quad-container">
    <MudDropContainer T="TournamentPlayer"
    Items="@ViewModel.UnassignedPlayers"
    ItemDropped="PlayerAssigned"
    Class="d-flex flex-column flex-grow-1">

        <ChildContent>
            <div class="d-flex">
                <div class="quads-section">
                    <div class="d-flex flex-wrap">
                        @for (var i = 0; i < DisplayedQuads.Count; i++)
                        {
                            var quad = DisplayedQuads[i];
                            var quadId = quad.Id.ToString();
                            var quadColorClass = GetThemeColorClass(quad.Id);
                            <MudPaper Class="@($"quad-paper ma-2 {quadColorClass}")" Elevation="3">
                                <div class="quad-table">
                                    <div class="quad-side">
                                        <div class="quad-identifier">
                                            <span>@quad.Title</span>
                                        </div>
                                    </div>
                                    <div class="quad-main">
                                        <div class="quad-header">
                                            <div class="quad-header-cell player-header">Player</div>
                                            <div class="quad-header-cell">Rd 1</div>
                                            <div class="quad-header-cell">Rd 2</div>
                                            <div class="quad-header-cell">Rd 3</div>
                                            <div class="quad-header-cell">Total</div>
                                        </div>

                                        <!-- For quad players -->
                                        <MudDropZone T="TournamentPlayer"
                                        Identifier="@quadId"
                                        ItemsSelector="@(p => p.QuadId?.ToString() == quadId)"
                                        AllowReorder="true"
                                        Class="quad-dropzone"/>
                                    </div>
                                </div>
                            </MudPaper>
                        }
                    </div>
                </div>

                <MudPaper Class="unassigned-paper ma-2" Elevation="2">
                    <div class="unassigned-header">
                        <h3 class="text-center">Unassigned Players</h3>
                    </div>
                    <MudDropZone T="TournamentPlayer"
                    Identifier="unassigned"
                    ItemsSelector="@(p => p.QuadId == null)"
                    AllowReorder="true"
                    Class="unassigned-dropzone"/>
                </MudPaper>
            </div>
        </ChildContent>

        <ItemRenderer>
            @if (context.QuadId.HasValue)
            {
                <div class="quad-player-row">
                    <div class="player-cell">
                        <div class="player-position">@GetPlayerPositionInQuad(context)</div>
                        <div class="player-name">@context.Player.LastName @context.Player.FirstName</div>
                        <div class="player-rating">@context.Player.Ranking</div>
                    </div>

                    @{
                        var position = GetPlayerPositionInQuad(context);
                        var opponents = GetQuadOpponents(context);
                    }

                    <!-- Replace the score input section in your HTML with this updated version -->
                    @foreach (var round in new[] { 1, 2, 3 })
                    {
                        <div class="round-cell">
                            <div class="opponent">@opponents[round - 1]</div>
                            <div class="score-cell">
                                <MudTextField T="string"
                                              Class="score-input"
                                              Value="@GetScore(context, round)"
                                              ValueChanged="@(async (string value) => await SaveScore(context, round, value))"
                                              Immediate="true"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Disabled="false" />
                            </div>
                            <div class="table-number">TBL @GetTableNumber(context, round)</div>
                        </div>
                    }
                   

                    <div class="total-cell">
                        <span class="total-score">@GetTotalScore(context)</span>
                        @if (ViewModel.AllowPlayerRemoval)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Close"
                            Size="Size.Small"
                            Class="remove-btn"
                            OnClick="@(() => RemovePlayerFromQuad(context))"/>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="player-card unassigned">
                    <div class="player-info">
                        <div class="player-name">@context.Player.LastName @context.Player.FirstName</div>
                        <div class="player-rating">@context.Player.Ranking</div>
                    </div>
                </div>
            }
        </ItemRenderer>
    </MudDropContainer>
</div>

<style>
    .quad-container {
    width: 100%;
    }

    /* Layout for side-by-side display */
    .quads-section {
    flex: 4;
    }

    .unassigned-paper {
    flex: 1;
    min-width: 220px;
    max-width: 300px;
    height: fit-content;
    margin-top: 0 !important;
    }

    .quad-paper {
    width: 48%;
    margin: 0 1% 16px 1%;
    border: 1px solid #ddd;
    display: flex;
    flex-direction: column;
    }

    /* Quad table layout */
    .quad-table {
    display: flex;
    width: 100%;
    height: 100%;
    border-collapse: collapse;
    }

    .quad-side {
    width: 70px;
    /* Background color inherits from parent .quad-paper which has the color class */
    border-right: 1px solid var(--mud-palette-divider);
    display: flex;
    align-items: center;
    justify-content: center;
    writing-mode: vertical-rl;
    transform: rotate(180deg);
    }

    .quad-identifier {
    font-size: 24px;
    font-weight: bold;
    text-align: center;
    height: 100%;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--mud-palette-text-primary);
    }

    .quad-main {
    flex: 1;
    }

    /* Quad header */
    .quad-header {
    display: flex;
    border-bottom: 1px solid var(--mud-palette-divider);
    background-color: var(--mud-palette-surface);
    }

    .quad-header-cell {
    flex: 1;
    padding: 8px;
    text-align: center;
    font-weight: bold;
    border-right: 1px solid var(--mud-palette-divider);
    display: flex;
    align-items: center;
    justify-content: center;
    }

    .player-header {
    flex: 2.45;
    }

    /* Quad dropzone */
    .quad-dropzone {
    min-height: 400px;
    background-color: var(--mud-palette-background-grey);
    }

    /* Player row in quad */
    .quad-player-row {
    display: flex;
    border-bottom: 1px solid var(--mud-palette-divider);
    background-color: var(--mud-palette-surface);
    }

    .player-cell {
    flex: 2;
    padding: 8px;
    border-right: 1px solid #ddd;
    display: flex;
    flex-direction: column;
    }

    .player-position {
    font-size: 18px;
    font-weight: bold;
    margin-right: 8px;
    color: #666;
    }

    .player-name {
    font-size: 18px;
    font-weight: bold;
    color: #666;
    }

    .player-rating {
    font-size: 16px;
    color: #333;
    }

    .round-cell {
    flex: 1;
    display: flex;
    flex-direction: column;
    border-right: 1px solid #ddd;
    margin: 0;
    }

    .opponent {
    padding: 4px;
    text-align: center;
    border-bottom: 1px solid #eee;
    color: #666;
    }

    .score-cell {
    padding: 8px;
    text-align: center;
    font-size: 18px;
    font-weight: bold;
    background-color: inherit;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    }

    .table-number {
    padding: 4px;
    text-align: center;
    border-top: 1px solid #eee;
    color: #666;
    }

    .total-cell {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: relative;
    }

    .total-score {
    font-size: 32px;
    font-weight: bold;
    color: #666;
    }

    .remove-btn {
    position: absolute;
    top: 4px;
    right: 4px;
    }

    /* Unassigned players section */
    .unassigned-header {
    background-color: #f0f0f0;
    padding: 8px;
    border-bottom: 1px solid #ddd;
    }

    .unassigned-dropzone {
    min-height: 400px;
    padding: 8px;
    overflow-y: auto;
    }

    .player-card {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
    padding: 6px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 4px;
    width: 100%;
    font-size: 14px;
    }

    .player-number {
    font-size: 20px;
    font-weight: bold;
    margin-right: 16px;
    min-width: 24px;
    text-align: center;
    }

    .player-info {
    flex-grow: 1;
    }

    /* Pagination styles */
    .pagination-controls {
    margin-bottom: 12px;
    display: flex;
    align-items: center;
    }

    .mud-pagination {
    margin-right: 16px;
    }

    /* Theme color classes for quads */
    /* Primary color */
    .quad-paper.mud-paper.quad-color-primary {
    background-color: var(--mud-palette-primary-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-primary .quad-side {
    background-color: var(--mud-palette-primary-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-primary .score-cell {
    background-color: var(--mud-palette-primary-lighten) !important;
    }

    /* Secondary color */
    .quad-paper.mud-paper.quad-color-secondary {
    background-color: var(--mud-palette-secondary-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-secondary .quad-side {
    background-color: var(--mud-palette-secondary-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-secondary .score-cell {
    background-color: var(--mud-palette-secondary-lighten) !important;
    }

    /* Info color */
    .quad-paper.mud-paper.quad-color-info {
    background-color: var(--mud-palette-info-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-info .quad-side {
    background-color: var(--mud-palette-info-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-info .score-cell {
    background-color: var(--mud-palette-info-lighten) !important;
    }

    /* Success color */
    .quad-paper.mud-paper.quad-color-success {
    background-color: var(--mud-palette-success-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-success .quad-side {
    background-color: var(--mud-palette-success-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-success .score-cell {
    background-color: var(--mud-palette-success-lighten) !important;
    }

    /* Warning color */
    .quad-paper.mud-paper.quad-color-warning {
    background-color: var(--mud-palette-warning-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-warning .quad-side {
    background-color: var(--mud-palette-warning-lighten) !important;
    }

    .quad-paper.mud-paper.quad-color-warning .score-cell {
    background-color: var(--mud-palette-warning-lighten) !important;
    }

    /* Surface color */
    .quad-paper.mud-paper.quad-color-surface {
    background-color: var(--mud-palette-surface) !important;
    }

    .quad-paper.mud-paper.quad-color-surface .quad-side {
    background-color: var(--mud-palette-surface) !important;
    }

    .quad-paper.mud-paper.quad-color-surface .score-cell {
    background-color: var(--mud-palette-surface) !important;
    }

    /* Original colors */
    .quad-paper.mud-paper.quad-color-yellow {
    background-color: #ffffcc !important;
    }

    .quad-paper.mud-paper.quad-color-yellow .quad-side {
    background-color: #ffffcc !important;
    }

    .quad-paper.mud-paper.quad-color-yellow .score-cell {
    background-color: #ffffcc !important;
    }

    .quad-paper.mud-paper.quad-color-blue {
    background-color: #e6f7ff !important;
    }

    .quad-paper.mud-paper.quad-color-blue .quad-side {
    background-color: #e6f7ff !important;
    }

    .quad-paper.mud-paper.quad-color-blue .score-cell {
    background-color: #e6f7ff !important;
    }
</style>

<style>
    /* Media queries need to be in a separate style block in Blazor */
    @@media (max-width: 1400px) {
    .quad-paper {
    width: 31%;
    }
    }

    @@media (max-width: 1200px) {
    /*     .quads-section {
    flex: 3;
    } */

    .quad-paper {
    width: 48%;
    }
    }

    @@media (max-width:1080px) {
    .quad-paper {
    width: width: 48%; /* Maintain 2 quads per row */
    }
    }

    @@media (max-width: 768px) {
    /* Switch to vertical layout on small screens */
    .d-flex {
    flex-direction: column;
    }
    }

    .quads-section {
    width: 100%;
    }

    .unassigned-paper {
    width: 100%;
    max-width: none;
    margin-top: 16px !important;
    }

    /* Responsive pagination */
    .pagination-controls {
    flex-direction: column;
    align-items: start;
    }

    .pagination-controls .mud-pagination {
    margin-bottom: 12px;
    margin-right: 0;
    }

    .pagination-controls .mud-typography {
    margin-left: 0;
    }

    }
</style>

@code {
    [Parameter] public int TournamentId { get; set; }

    // Get the dark mode state from the layout
    private bool IsDarkMode => ThemeProvider.IsDarkMode;

    private QuadsViewModel ViewModel { get; set; } = new();

    // Properties from the ViewModel
    private string TournamentName => ViewModel?.TournamentName ?? "Tournament Name";
    public List<Quad> DisplayedQuads { get; set; } = new();
    private int CurrentPage { get; set; } = 1;
    private int TotalPages => ViewModel?.TotalPages ?? 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Reload data if the tournament ID changes
        await LoadData();
    }

    private async Task LoadData()
    {
        // update app state
        AppState.TournamentId = TournamentId;

        var tournament = await DbContext.Tournaments
            .Include(t => t.Quads)
            .FirstOrDefaultAsync(t => t.Id == TournamentId);

        if (tournament == null)
        {
            NavigationManager.NavigateTo("/tournaments");
            return;
        }

        // Get all quads for this tournament
        var allQuads = await DbContext.Quads
            .Where(q => q.TournamentId == TournamentId)
            .OrderBy(q => q.QuadGroupNumber)
            .ToListAsync();

        // Include players in the quads
        foreach (var quad in allQuads)
        {
            quad.Players = await DbContext.TournamentPlayers
                .Include(tp => tp.Player)
                .Where(tp => tp.QuadId == quad.Id)
                .OrderBy(tp => tp.QuadPosition)
                .ToListAsync();
        }

        // Get unassigned players
        var unassignedPlayers = await DbContext.TournamentPlayers
            .Include(tp => tp.Player)
            .Where(tp => tp.TournamentId == TournamentId && !tp.QuadId.HasValue)
            .OrderByDescending(tp => tp.Player.Ranking)
            .ToListAsync();

        // Set displayed quads for current page
        var pageSize = 4; // 4 quads per page
        var skip = (CurrentPage - 1) * pageSize;
        DisplayedQuads = allQuads
            .OrderBy(q => q.QuadGroupNumber)
            .Skip(skip)
            .Take(pageSize)
            .ToList();

        // Update ViewModel
        ViewModel = new QuadsViewModel
            {
                Tournament = tournament,
                TournamentId = TournamentId,
                TournamentName = tournament.Name,
                Quads = allQuads,
                AllQuads = allQuads,
                UnassignedPlayers = unassignedPlayers.Concat(DisplayedQuads.SelectMany(q => q.Players)).ToList(),
                CurrentPage = CurrentPage,
                TotalPages = (int)Math.Ceiling(allQuads.Count / 4.0),
                AllowQuadGeneration = true,
                AllowPlayerRemoval = true,
                AllowPlayerAssignment = true,
                AreAllQuadsFull = allQuads.Count > 0 && allQuads.All(q => q.Players.Count == 4)
            };
    }

    private string GetPlayerPositionInQuad(TournamentPlayer player)
    {
        if (!player.QuadId.HasValue || !player.QuadPosition.HasValue)
            return "";

        return player.QuadPosition.Value.ToString();
    }

    private string[] GetQuadOpponents(TournamentPlayer player)
    {
        if (!player.QuadId.HasValue || !player.QuadPosition.HasValue)
            return new[] { "", "", "" };

        var position = player.QuadPosition.Value;

        // Standard quad pairing pattern
        switch (position)
        {
            case 1: return new[] { "W v 4", "B v 3", "W v 2" };
            case 2: return new[] { "W v 3", "B v 4", "B v 1" };
            case 3: return new[] { "B v 2", "W v 1", "W v 4" };
            case 4: return new[] { "B v 1", "W v 2", "B v 3" };
            default: return new[] { "", "", "" };
        }
    }

    private string GetScore(TournamentPlayer player, int round)
    {
        if (!player.QuadId.HasValue)
            return "";

        // Get score directly from database
        var match = DbContext.QuadMatches
            .FirstOrDefault(m =>
                m.QuadId == player.QuadId &&
                m.RoundNumber == round &&
                (m.PlayerOneId == player.Id || m.PlayerTwoId == player.Id));

        if (match == null)
            return "";

        if (match.PlayerOneId == player.Id)
            return match.PlayerOneScore?.ToString() ?? "";
        else
            return match.PlayerTwoScore?.ToString() ?? "";
    }

    private string GetTotalScore(TournamentPlayer player)
    {
        if (!player.QuadId.HasValue)
            return "";

        decimal total = 0;
        for (var round = 1; round <= 3; round++)
        {
            var score = GetScore(player, round);
            if (decimal.TryParse(score, out var value))
                total += value;
        }

        return total.ToString("0.#");
    }

    private int GetTableNumber(TournamentPlayer player, int round)
    {
        if (!player.QuadPosition.HasValue)
            return 1;

        var position = player.QuadPosition.Value;

        // Standard table assignments
        switch (position)
        {
            case 1: return round == 1 ? 1 : round == 2 ? 1 : 1;
            case 2: return round == 1 ? 2 : round == 2 ? 2 : 1;
            case 3: return round == 1 ? 2 : round == 2 ? 1 : 2;
            case 4: return round == 1 ? 1 : round == 2 ? 2 : 2;
            default: return 1;
        }
    }

    // Simplified score saving - direct to database
    private async Task SaveScore(TournamentPlayer player, int round, string scoreValue)
    {
        if (!player.QuadId.HasValue)
            return;

        try
        {
            var match = await DbContext.QuadMatches
                .FirstOrDefaultAsync(m =>
                    m.QuadId == player.QuadId &&
                    m.RoundNumber == round &&
                    (m.PlayerOneId == player.Id || m.PlayerTwoId == player.Id));

            if (match == null)
            {
                Snackbar.Add($"Match not found for Round {round}", Severity.Error);
                return;
            }

            // Update the appropriate player's score
            if (match.PlayerOneId == player.Id)
            {
                match.PlayerOneScore = decimal.TryParse(scoreValue, out var score) ? score : null;
            }
            else
            {
                match.PlayerTwoScore = decimal.TryParse(scoreValue, out var score) ? score : null;
            }

            // Mark as complete if both scores entered
            match.IsComplete = match.PlayerOneScore.HasValue && match.PlayerTwoScore.HasValue;
            if (match.IsComplete)
                match.CompletedAt = DateTime.UtcNow;

            await DbContext.SaveChangesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving score: {ex.Message}");
            Snackbar.Add("Error saving score", Severity.Error);
        }
    }

    private async Task PlayerAssigned(MudItemDropInfo<TournamentPlayer> dropInfo)
    {
        var player = dropInfo.Item;
        var oldQuadId = player.QuadId;

        // Update player assignment
        if (dropInfo.DropzoneIdentifier == "unassigned")
        {
            player.QuadId = null;
            player.QuadPosition = null;
        }
        else if (int.TryParse(dropInfo.DropzoneIdentifier, out var quadId))
        {
            var quad = DisplayedQuads.FirstOrDefault(q => q.Id == quadId);
            if (quad != null && (quad.Players.Count < 4 || quad.Players.Contains(player)))
            {
                player.QuadId = quadId;
                if (!quad.Players.Contains(player))
                    quad.Players.Add(player);
            }
        }

        DbContext.TournamentPlayers.Update(player);
        await DbContext.SaveChangesAsync();

        // Handle quad updates
        if (oldQuadId.HasValue)
            await UpdateQuadAfterPlayerChange(oldQuadId.Value);

        if (player.QuadId.HasValue)
            await UpdateQuadAfterPlayerChange(player.QuadId.Value);

        await LoadData();
    }

    private async Task RemovePlayerFromQuad(TournamentPlayer player)
    {
        if (!player.QuadId.HasValue)
            return;

        var quadId = player.QuadId.Value;

        // Remove player from quad
        player.QuadId = null;
        player.QuadPosition = null;

        DbContext.TournamentPlayers.Update(player);
        await DbContext.SaveChangesAsync();

        // Update the quad
        await UpdateQuadAfterPlayerChange(quadId);
        await LoadData();
    }

    private async Task UpdateQuadAfterPlayerChange(int quadId)
    {
        // Delete all existing matches for this quad
        var existingMatches = await DbContext.QuadMatches
            .Where(m => m.QuadId == quadId)
            .ToListAsync();

        DbContext.QuadMatches.RemoveRange(existingMatches);

        // Get current players in quad
        var quadPlayers = await DbContext.TournamentPlayers
            .Include(tp => tp.Player)
            .Where(tp => tp.QuadId == quadId)
            .OrderByDescending(tp => tp.Player.Ranking)
            .ToListAsync();

        // Renumber positions
        for (int i = 0; i < quadPlayers.Count; i++)
        {
            quadPlayers[i].QuadPosition = i + 1;
            DbContext.TournamentPlayers.Update(quadPlayers[i]);
        }

        // If quad is full (4 players), create new matches
        if (quadPlayers.Count == 4)
        {
            CreateMatchesForQuad(quadId, quadPlayers.ToArray());
        }

        await DbContext.SaveChangesAsync();
    }

    private void CreateMatchesForQuad(int quadId, TournamentPlayer[] players)
    {
        // Round 1: 1v4, 2v3
        CreateMatch(quadId, players[0], players[3], 1, 1, "W");
        CreateMatch(quadId, players[1], players[2], 1, 2, "W");

        // Round 2: 1v3, 2v4
        CreateMatch(quadId, players[0], players[2], 2, 1, "B");
        CreateMatch(quadId, players[1], players[3], 2, 2, "B");

        // Round 3: 1v2, 3v4
        CreateMatch(quadId, players[0], players[1], 3, 1, "W");
        CreateMatch(quadId, players[2], players[3], 3, 2, "W");
    }

    private void CreateMatch(int quadId, TournamentPlayer player1, TournamentPlayer player2,
        int round, int table, string player1Color)
    {
        var match = new QuadMatch
            {
                QuadId = quadId,
                PlayerOneId = player1.Id,
                PlayerTwoId = player2.Id,
                RoundNumber = round,
                TableNumber = table,
                PlayerOneName = $"{player1.Player.LastName} {player1.Player.FirstName}",
                PlayerTwoName = $"{player2.Player.LastName} {player2.Player.FirstName}",
                PlayerOneRanking = player1.Player.Ranking,
                PlayerTwoRanking = player2.Player.Ranking,
                PlayerOneColor = player1Color,
                IsComplete = false
            };

        DbContext.QuadMatches.Add(match);
    }

    private async Task OnPageChanged(int page)
    {
        CurrentPage = page;
        await LoadData();
    }

    private async Task PrintPage()
    {
        await JSRuntime.InvokeVoidAsync("window.print");
    }

    private async Task GenerateQuads()
    {
        try
        {
            // Get all unassigned players
            var unassignedPlayers = await DbContext.TournamentPlayers
                .Include(tp => tp.Player)
                .Where(tp => tp.TournamentId == TournamentId && !tp.QuadId.HasValue)
                .OrderByDescending(tp => tp.Player.Ranking)
                .ToListAsync();

            if (unassignedPlayers.Count == 0)
                return;

            // Find highest quad group number
            var maxGroupQuery = await DbContext.Quads
                .Where(q => q.TournamentId == TournamentId)
                .Select(q => q.QuadGroupNumber)
                .ToListAsync();

            var highestGroupNumber = maxGroupQuery.Any() ? maxGroupQuery.Max() : 0;

            // Create quads with 4 players each
            var quadCounter = 0;
            var playerCounter = 0;
            Quad currentQuad = null;

            while (playerCounter < unassignedPlayers.Count)
            {
                // Create new quad every 4 players
                if (playerCounter % 4 == 0)
                {
                    quadCounter++;
                    currentQuad = new Quad
                        {
                            Title = $"Quad {quadCounter}",
                            TournamentId = TournamentId,
                            QuadGroupNumber = highestGroupNumber + (int)Math.Ceiling(quadCounter / 4.0)
                        };

                    DbContext.Quads.Add(currentQuad);
                    await DbContext.SaveChangesAsync();
                }

                // Assign player to quad
                var player = unassignedPlayers[playerCounter];
                player.QuadId = currentQuad.Id;
                player.QuadPosition = playerCounter % 4 + 1;

                DbContext.TournamentPlayers.Update(player);
                playerCounter++;

                // Create matches when quad is full
                if (playerCounter % 4 == 0)
                {
                    var quadPlayers = unassignedPlayers
                        .Skip(playerCounter - 4)
                        .Take(4)
                        .ToArray();

                    CreateMatchesForQuad(currentQuad.Id, quadPlayers);
                }
            }

            await DbContext.SaveChangesAsync();
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating quads: {ex.Message}");
            Snackbar.Add("Error generating quads", Severity.Error);
        }
    }

    private string GetThemeColorClass(int quadNumber)
    {
        switch (quadNumber % 4)
        {
            case 0: return "quad-color-primary";
            case 1: return "quad-color-success";
            case 2: return "quad-color-secondary";
            case 3: return "quad-color-info";
            default: return "quad-color-surface";
        }
    }

    private bool MatchQuadSelector(TournamentPlayer player, string identifier)
    {
        return (player.QuadId?.ToString() ?? "unassigned") == identifier;
    }

    // Remove the PlayerScores dictionary and related methods
    // All score operations now go directly to database
}
}