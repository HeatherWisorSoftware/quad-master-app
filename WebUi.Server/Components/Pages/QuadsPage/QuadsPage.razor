@page "/QuadsPage/{TournamentId:int}/Quads"
@inject TournamentContext DbContext
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@rendermode InteractiveServer
<h3>Tournament Quads - @ViewModel?.TournamentName</h3>


@if (AllTournamentPlayers?.Any() ?? false)
{
    <div class="card mb-3">
        <div class="card-header bg-info text-white">
            All Players in Tournament 1
        </div>
        <div class="card-body">
            <div class="row">
                @foreach (var player in AllTournamentPlayers)
                {
                    <div class="col-md-4 mb-2">
                        <strong>@player.Player.FirstName @player.Player.LastName</strong>
                        (Rank: @player.Player.Ranking,
                        QuadId: @(player.QuadId.HasValue ? player.QuadId.ToString() : "None"))
                    </div>
                }
            </div>
        </div>
    </div>
}






<div class="row mb-3">
    <div class="col-12 col-md-6">
        @if (ViewModel != null)
        {
            @if (ViewModel.AllowQuadGeneration)
            {
                <button class="btn btn-primary" @onclick="GenerateQuads">Generate Quads</button>
            }
            <button class="btn btn-secondary" @onclick="() => NavigateToPage(ViewModel.CurrentPage - 1)" disabled="@(ViewModel.CurrentPage <= 1)">Previous</button>
            <span class="mx-2">Page @ViewModel.CurrentPage of @ViewModel.TotalPages</span>
            <button class="btn btn-secondary" @onclick="() => NavigateToPage(ViewModel.CurrentPage + 1)" disabled="@(ViewModel.CurrentPage >= ViewModel.TotalPages)">Next</button>
        }
    </div>
</div>



@if (ViewModel == null)
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        <div class="col-12 col-lg-8">
            <h4>Current Quads</h4>
            <div class="row">
                @foreach (var quad in ViewModel.Quads)
                {
                    <div class="col-12 col-md-6 mb-4">
                        <QuadsScoreBoard Quad="quad" 
                        AllowPlayerRemoval="ViewModel.AllowPlayerRemoval" 
                        OnPlayerRemoved="RemovePlayerFromQuad" />
                    </div>
                }
            </div>
        </div>
        <div class="col-12 col-lg-4">
            <h4>Unassigned Players (@ViewModel.UnassignedPlayers.Count)</h4>
            @if (ViewModel.UnassignedPlayers.Any())
            {
                <div class="card">
                    <div class="card-body">
                        <ul class="list-group">
                            @foreach (var player in ViewModel.UnassignedPlayers.OrderBy(p => p.Player.Ranking))
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @player.Player.FirstName @player.Player.LastName (@player.Player.Ranking)
                                    @if (ViewModel.AllowPlayerAssignment)
                                    {
                                        <div class="input-group" style="max-width: 250px;">
                                            <select class="form-select" @bind="selectedQuadId">
                                                <option value="">Select Quad</option>
                                                @foreach (var quad in ViewModel.AllQuads)
                                                {
                                                    <option value="@quad.Id">@quad.Title</option>
                                                }
                                            </select>
                                            <button class="btn btn-outline-secondary" 
                                            @onclick="() => AssignPlayerToQuad(player.Id)"
                                            disabled="@(string.IsNullOrEmpty(selectedQuadId?.ToString()))">
                                                Assign
                                            </button>
                                        </div>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                <p>No unassigned players.</p>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int TournamentId { get; set; } = 1;

    private QuadsViewModel? ViewModel { get; set; }
    private int? selectedQuadId;

    //List of tournamentplayers for testing
    private List<TournamentPlayer>? AllTournamentPlayers { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var tournament = await DbContext.Tournaments
            .Include(t => t.Quads)
            .FirstOrDefaultAsync(t => t.Id == TournamentId);

        if (tournament == null)
        {
            NavigationManager.NavigateTo("/tournaments");
            return;
        }

        //Load Tournament Players for testing
            AllTournamentPlayers = await DbContext.TournamentPlayers
            .Include(tp => tp.Player)
            .Where(tp => tp.TournamentId == TournamentId)
            .ToListAsync();



        // Get all quads for this tournament
        var allQuads = await DbContext.Quads
            .Where(q => q.TournamentId == TournamentId)
            .ToListAsync();

        // Calculate total pages based on 4 quads per page
        int totalQuads = allQuads.Count;
        int totalPages = (int)Math.Ceiling(totalQuads / 4.0);
        totalPages = totalPages == 0 ? 1 : totalPages;

        // Get current page quads
        //new code
		int currentPage = ViewModel?.CurrentPage ?? 1;
        //end new code
        int pageSize = 4;
        int skip = (ViewModel?.CurrentPage ?? 1) - 1 * pageSize;
        var currentPageQuads = allQuads
            .OrderBy(q => q.QuadGroupNumber)
            .Skip(skip)
            .Take(pageSize)
            .ToList();

        // Include players in the quads
        foreach (var quad in currentPageQuads)
        {
            quad.Players = await DbContext.TournamentPlayers
                .Include(tp => tp.Player)
                .Where(tp => tp.QuadId == quad.Id)
                .ToListAsync();
        }

        // Get unassigned players
        var unassignedPlayers = await DbContext.TournamentPlayers
            .Include(tp => tp.Player)
            .Where(tp => tp.TournamentId == TournamentId && !tp.QuadId.HasValue)
            .ToListAsync();

        // Update ViewModel
        ViewModel = new QuadsViewModel
        {
            TournamentId = TournamentId,
            TournamentName = tournament.Name,
            Quads = currentPageQuads,
            AllQuads = allQuads,
            UnassignedPlayers = unassignedPlayers,
            CurrentPage = ViewModel?.CurrentPage ?? 1,
            TotalPages = totalPages,
            AllowQuadGeneration = true,
            //AllowQuadGeneration = unassignedPlayers.Count >= 4,
            AllowPlayerRemoval = true,
            AllowPlayerAssignment = true,
            AreAllQuadsFull = allQuads.Count > 0 && allQuads.All(q => q.Players.Count == 4)
        };
    }

    private void NavigateToPage(int page)
    {
        if (page < 1 || page > ViewModel.TotalPages)
            return;

        ViewModel.CurrentPage = page;
        LoadData();
    }

    private async Task GenerateQuads()
    {
        // Get all unassigned players
        var unassignedPlayers = await DbContext.TournamentPlayers
            .Include(tp => tp.Player)
            .Where(tp => tp.TournamentId == TournamentId && !tp.IsAssigned)
            .OrderBy(tp => tp.Player.Ranking)
            .ToListAsync();

        // Find the highest quad group number for this tournament
        var highestGroupNumber = await DbContext.Quads
            .Where(q => q.TournamentId == TournamentId)
            .Select(q => q.QuadGroupNumber)
            .DefaultIfEmpty(0)
            .MaxAsync();

        // Create quads with 4 players each
        int quadCounter = 0;
        int playerCounter = 0;
        Quad currentQuad = null;

        while (playerCounter < unassignedPlayers.Count)
        {
            // Create a new quad for every 4 players
            if (playerCounter % 4 == 0)
            {
                quadCounter++;
                currentQuad = new Quad
                {
                    Title = $"Quad {quadCounter}",
                    TournamentId = TournamentId,
                    QuadGroupNumber = highestGroupNumber + (int)Math.Ceiling(quadCounter / 4.0)
                };

                DbContext.Quads.Add(currentQuad);
                await DbContext.SaveChangesAsync(); // Save to get Id
            }

            // Assign player to the quad
            var player = unassignedPlayers[playerCounter];
            player.QuadId = currentQuad.Id;
            playerCounter++;
        }

        await DbContext.SaveChangesAsync();
        ToastService.ShowSuccess("Quads generated successfully.");
        await LoadData();
    }

    private async Task RemovePlayerFromQuad(int playerId)
    {
        var tournamentPlayer = await DbContext.TournamentPlayers
            .FirstOrDefaultAsync(tp => tp.Id == playerId);

        if (tournamentPlayer != null)
        {
            tournamentPlayer.QuadId = null;
            await DbContext.SaveChangesAsync();
            ToastService.ShowInfo("Player removed from quad.");
            await LoadData();
        }
    }

    private async Task AssignPlayerToQuad(int playerId)
    {
        if (!selectedQuadId.HasValue)
        {
            ToastService.ShowWarning("Please select a quad first.");
            return;
        }

        var tournamentPlayer = await DbContext.TournamentPlayers
            .FirstOrDefaultAsync(tp => tp.Id == playerId);

        if (tournamentPlayer != null)
        {
            // Check if the quad already has 4 players
            var playersInQuad = await DbContext.TournamentPlayers
                .CountAsync(tp => tp.QuadId == selectedQuadId.Value);

            if (playersInQuad >= 4)
            {
                ToastService.ShowError("This quad already has 4 players.");
                return;
            }

            tournamentPlayer.QuadId = selectedQuadId.Value;
            await DbContext.SaveChangesAsync();
            ToastService.ShowSuccess("Player assigned to quad.");
            await LoadData();
        }
    }
}