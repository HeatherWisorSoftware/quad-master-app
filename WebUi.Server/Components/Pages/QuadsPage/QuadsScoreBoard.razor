@inject TournamentContext DbContext

<div class="card">
    <div class="card-header bg-primary text-white">
        @Quad.Title
    </div>
    <div class="card-body">
        @if (Quad.Players.Count == 0)
        {
            <p>No players assigned to this quad yet.</p>
        }
        else
        {
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Player</th>
                        <th>Ranking</th>
                        @if (AllowPlayerRemoval)
                        {
                            <th>Actions</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in Quad.Players.OrderBy(p => p.Player.Ranking))
                    {
                        <tr>
                            <td>@(Quad.Players.OrderBy(p => p.Player.Ranking).ToList().IndexOf(player) + 1)</td>
                            <td>@player.Player.FirstName @player.Player.LastName</td>
                            <td>@player.Player.Ranking</td>
                            @if (AllowPlayerRemoval)
                            {
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => RemovePlayer(player.Id)">
                                        Remove
                                    </button>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>

            @if (ShowScores && Quad.Players.Count == 4)
            {
                <div class="mt-3">
                    <h5>Scores</h5>
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Player</th>
                                    @foreach (var player in Quad.Players.OrderBy(p => p.Player.Ranking))
                                    {
                                        <th>vs @player.Player.FirstName.Substring(0, 1). @player.Player.LastName</th>
                                    }
                                    <th>Score</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var player in Quad.Players.OrderBy(p => p.Player.Ranking))
                                {
                                    <tr>
                                        <td>@player.Player.FirstName @player.Player.LastName</td>
                                        @foreach (var opponent in Quad.Players.OrderBy(p => p.Player.Ranking))
                                        {
                                            <td>
                                                @if (player.Id == opponent.Id)
                                                {
                                                    <span>X</span>
                                                }
                                                else
                                                {
                                                    <select class="form-select form-select-sm">
                                                        <option value="">-</option>
                                                        <option value="1">Win</option>
                                                        <option value="0.5">Draw</option>
                                                        <option value="0">Loss</option>
                                                    </select>
                                                }
                                            </td>
                                        }
                                        <td>0</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        }
    </div>
    <div class="card-footer">
        <div class="d-flex justify-content-between">
            <span>Players: @Quad.Players.Count/4</span>
            @if (Quad.Players.Count == 4 && !ShowScores)
            {
                <button class="btn btn-sm btn-outline-primary" @onclick="ToggleScores">
                    Show Scores
                </button>
            }
            else if (Quad.Players.Count == 4 && ShowScores)
            {
                <button class="btn btn-sm btn-outline-primary" @onclick="ToggleScores">
                    Hide Scores
                </button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Quad Quad { get; set; }

    [Parameter]
    public bool AllowPlayerRemoval { get; set; } = true;

    [Parameter]
    public EventCallback<int> OnPlayerRemoved { get; set; }

    private bool ShowScores { get; set; } = false;

    private async Task RemovePlayer(int playerId)
    {
        if (OnPlayerRemoved.HasDelegate)
        {
            await OnPlayerRemoved.InvokeAsync(playerId);
        }
    }

    private void ToggleScores()
    {
        ShowScores = !ShowScores;
    }
}